.. _ru-decorate:

decorate
*********************

``decorate`` используется для изменения или обёртки объекта, который уже настроен в другом ``Provider (Провайдере)``.

Объект Provider также имеет метод ``.decorate`` с аналогичной логикой.

Если вы хотите применить паттерн "Декоратор" и не изменять существующий метод provide, то ``decorate`` — это подходящее решение. Он создаст объект с помощью ранее определённого провайдера, а затем передаст его вашему декоратору перед возвращением из контейнера.

.. code-block:: python

    from dishka import decorate, Provider

    class MyProvider(Provider):
        @decorate
        def decorate_a(self, a: A) -> A:
            return ADecorator(a)

Такой декоратор также может принимать дополнительные параметры.

.. code-block:: python

    from dishka import decorate, Provider

    class MyProvider(Provider):
        @decorate
        def decorate_a(self, a: A, b: B) -> A:
            return ADecorator(a)

Ограничение заключается в том, что нельзя использовать ``decorate`` в том же провайдере, где объявляется фабрика или алиас для зависимости. Но в этом и нет необходимости, потому что можно просто изменить код фабрики.

Идея ``decorate`` заключается в постобработке зависимостей, предоставляемых внешним источником, когда вы объединяете несколько объектов ``Provider`` в один контейнер.