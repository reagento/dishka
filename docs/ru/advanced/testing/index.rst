Тестирование с dishka
***************************

Тестирование вашего кода не всегда требует запуска всего приложения. Вы можете писать модульные тесты для отдельных компонентов и даже интеграционные тесты, которые проверяют только определенные связи. Во многих случаях вам не нужен IoC-контейнер: вы создаёте объекты с помощью Dependency Injection, а не фреймворка.

Однако в других ситуациях, когда требуется вызывать функции, находящиеся на границах приложения, контейнер необходим. Например, при тестировании view-функций с моками бизнес-логики или тестировании приложения в целом. В отличие от production-режима, у вас останутся те же реализации для некоторых классов, а другие будут заменены на моки. К счастью, в ``dishka`` контейнер не является неявной глобальной сущностью, и его можно легко заменить.

Есть много способов создать провайдеры с mock-объектами. Если вы используете ``pytest``, то можете:

* использовать фикстуры для настройки моков и передавать эти объекты в провайдер
* создавать моки внутри провайдера и получать их из контейнера в фикстурах pytest

Главное ограничение заключается в том, что сам контейнер нельзя изменить после создания. Вы можете настраивать провайдеры в любое время до создания контейнера. Как только он создан, граф зависимостей строится и валидируется, и всё, что остаётся — это передавать контекстные данные при входе в scope.

Пример
===================

Представьте, что у вас есть сервис, построенный на FastAPI:

.. literalinclude:: ./app_before.py

И контейнер:

.. literalinclude:: ./container_before.py

Прежде всего — разделите фабрику приложения и настройку контейнера.

.. literalinclude:: ./app_factory.py

Создайте провайдер с вашими mock-объектами. Вы можете продолжать использовать провайдеры из production-окружения и переопределять зависимости в новом провайдере. Или же можно собрать контейнер только с новыми провайдерами. Это зависит от структуры вашего приложения и типа теста.

.. literalinclude:: ./fixtures.py

Напиши тесты.

.. literalinclude:: ./sometest.py


Собери всё вместе
============================

.. literalinclude:: ./test_example.py
