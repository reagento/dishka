.. _ru-technical-requirements:

Технические требования (Technical requirements)
*****************************************************

1. Области видимости (Scopes)
======================================

1. Библиотека должна поддерживать различные области видимости (scopes).
2. Все зависимости привязываются к областям видимости до того, как они могут быть созданы.
3. Должен быть набор областей видимости по умолчанию.
4. Области видимости упорядочены. Порядок определяется при их объявлении.
5. В область видимости можно войти и выйти из неё.
6. В область видимости нельзя войти раньше, чем вошёл в предыдущую (по порядку).
7. Одна и та же область видимости может быть использована одновременно несколько раз (конкурентно).
8. Если одна и та же зависимость запрашивается несколько раз в рамках одной области видимости, возвращается один и тот же экземпляр. Кеш не разделяется между параллельными экземплярами одной области видимости.
9. Зависимость может требовать другие зависимости из той же или предыдущих областей видимости.

2. Конкурентность (Concurrency)
======================================

1. Контейнеры должны поддерживать использование с многопоточностью или asyncio. Не требуется поддерживать оба варианта в одном объекте.
2. Создание зависимостей с помощью асинхронных функций должно поддерживаться, если контейнер настроен на работу в режиме asyncio.
3. Параллельный вход в области видимости (scopes) не должен нарушать требование единственного экземпляра зависимости. Тип модели параллелизма можно настроить при создании контейнера.
4. Пользователь контейнера может включать или отключать синхронизацию для настройки производительности.

3. Чистые зависимости (Clean dependencies)
==============================================

1. Использование контейнера не должно требовать изменения объектов, которые мы создаем.
2. Контейнер не должен требовать, чтобы он был глобальной переменной.
3. Контейнер может требовать изменений кода на границах областей видимости (например, при запуске приложения, в middleware, в обработчиках запросов).

4. Жизненный цикл (Lifecycle)
======================================

1. Зависимости, требующие очистки, должны быть очищены при выходе из области видимости
2. Зависимости, не требующие очистки, должны поддерживаться каким-либо образом
3. Зависимости очищаются в порядке, обратном их созданию
4. Исключения не должны препятствовать очистке остальных зависимостей

5. Контекстные данные (Context data)
=================================================

1. Должна быть возможность передавать некоторые данные при входе в область видимости
2. Данные контекста должны быть доступны при создании зависимостей

6. Модульность (Modularity)
======================================

1. В одной кодовой базе может быть несколько контейнеров для разных целей.
2. Должен быть способ собирать контейнер из переиспользуемых частей.
3. Сборка контейнера должна происходить во время выполнения в локальной области видимости.
4. Должна быть возможность изолировать разные части контейнера, чтобы они не влияли друг на друга.
5. Изолированные части должны иметь API для взаимодействия между собой, если это явно запрошено.

7. Удобство использования (Usability)
=================================================

1. Должна быть возможность создавать зависимость на основе её ``__init__``
2. При создании зависимости должна быть возможность выбирать подтип и запрашивать только его зависимости
3. Должна быть возможность использовать один и тот же объект для нескольких запрашиваемых типов
4. Должна быть возможность декорировать зависимость, просто добавляя новые провайдеры
5. Должна быть возможность входить в несколько областей видимости (scopes) одним вызовом. Последняя из этих областей используется при запросе зависимостей.
6. Ошибки пользователя контейнера должны быть понятными и содержать информацию, необходимую для их устранения
7. Граф зависимостей должен предварительно анализироваться для выявления наиболее очевидных ошибок

8. Интеграция (Integration)
======================================

1. Для некоторых популярных фреймворков следует предоставить дополнительные вспомогательные инструменты. Например: Flask, FastAPI, Aiogram, Celery, APScheduler.
2. Эти вспомогательные инструменты должны быть опциональными (необязательными).
3. Дополнительные интеграции должны быть реализованы без изменения кода библиотеки.
