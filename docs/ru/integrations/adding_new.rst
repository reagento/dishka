.. _ru-adding_new:

Добавление новых интеграций
===========================

Хотя в библиотеке уже есть некоторые интеграции, вы не ограничены только ими.

Основные моменты:

1. Найдите способ передать глобальный экземпляр контейнера. Обычно он прикреплён к экземпляру приложения или передаётся через middleware.
2. Определите место для входа и выхода из области запроса (request scope) и способ передачи контейнера в обработчик. Обычно вход осуществляется в middleware, а контейнер сохраняется в каком-либо контексте запроса.

    Альтернативно, вы можете использовать функцию ``wrap_injection`` с параметром ``manage_scope=True`` для автоматического входа и выхода из области запроса без использования middleware. Когда этот параметр включён, ``manage_scope`` гарантирует, что контейнер, переданный в ``wrap_injection``, войдёт и выйдет из следующей области видимости.
3. Настройте декоратор. Основная задача здесь - предоставить способ получения контейнера. Часто требуется модифицировать сигнатуру обработчика, добавляя дополнительные параметры. Это также доступно.
4. Проверьте, можно ли применить декоратор автоматически.

Хотя написание middleware и работа с областями видимости выполняется вашим пользовательским кодом, у нас есть вспомогательная функция для создания декораторов ``@inject`` - это функция ``wrap_injection``.

* ``container_getter`` - функция с двумя параметрами ``(args, kwargs)``, которая вызывается для получения контейнера, используемого для извлечения зависимостей в пределах области видимости.
* ``additional_params`` - список параметров ``inspect.Parameter``, которые должны быть добавлены в сигнатуру обработчика.

Для более подробной информации изучите существующие интеграции.